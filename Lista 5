#Questão 1
"""
Dado um ponto, a função acha o vizinho mais próximo dentro 
uma nuvem de outros pontos sobre alguma distribuição.
Suas operações de subtração, cálculo de norma e achar o mínimo 
dentre as distâncias são todas O(N). Logo, o algoritmo é O(N)."""


#Questão 2
import random

def generate_maze(m, n, room=' ', wall='H', cheese='C'):
    maze = [[wall] * (2 * n + 1) for _ in range(2 * m + 1)]
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    def dfs(x, y):
        stack = [[x, y]]
        while stack:
            current_x, current_y = stack[-1]
            maze[2 * current_x + 1][2 * current_y + 1] = room
            random.shuffle(directions)
            found = False
            
            for dx, dy in directions:
                nx, ny = current_x + dx, current_y + dy
                if 0 <= nx < m and 0 <= ny < n and maze[2 * nx + 1][2 * ny + 1] == wall:
                    maze[2 * current_x + 1 + dx][2 * current_y + 1 + dy] = room
                    stack.append([nx, ny])
                    found = True
                    break
            
            if not found:
                stack.pop()

    dfs(0, 0)

    while True: 
        i = random.randint(0, m - 1) * 2 + 1
        j = random.randint(0, n - 1) * 2 + 1
        if maze[i][j] == room:
            maze[i][j] = cheese 
            break

    return maze

def print_maze(maze):
    for row in maze:
        print(" ".join(map(str, row)))

if __name__ == '__main__':
    m, n = 5, 7
    maze = generate_maze(m, n)

#Questão 3
#import random (já foi importado anteriormente)
def find_cheese(m, n, maze, room=' ', cheese='C'):
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    path = []

    def dfs(x, y):
        if maze[x][y] == cheese:
            return True

        maze[x][y] = '+'
        path.append((x, y))

        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] in (room, cheese):
                if dfs(nx, ny):
                    return True

        path.pop()
        maze[x][y] = room
        return False

    if dfs(1, 1):
        return path
if __name__ == '__main__':
    path = find_cheese(m, n, maze)
    for x, y in path:
        maze[x][y] = '+'
    print_maze(maze)

#Questão 4

class Vertex:
    def __init__(self, name, value):
        self.name = name
        self.value = value
        self.edges = []

class Graph:
    def __init__(self, adjlist):
        self.adjlist = {key: Vertex(key, None) for key in adjlist}
        for key, edges in adjlist.items():
            self.adjlist[key].edges = edges
        self.vertexset = self.build_vertex_set()

    def build_vertex_set(self):
        vertexset = set(self.adjlist.keys())
        for vertex in self.adjlist.values():
            vertexset.update(vertex.edges)
        return vertexset

    def neighbors(self, x):
        return self.adjlist[x].edges

    def adjacent(self, x, y):
        return y in self.adjlist[x].edges

    def add_vertex(self, name, value):
        if name in self.adjlist:
            return False
        self.adjlist[name] = Vertex(name, value)
        return True

    def remove_vertex(self, name):
        if name not in self.adjlist:
            return False
        for vertex in self.adjlist.values():
            if name in vertex.edges:
                vertex.edges.remove(name)
        del self.adjlist[name]
        return True

    def add_edge(self, x, y):
        if y in self.adjlist[x].edges:
            return False
        self.adjlist[x].edges.append(y)
        return True

    def remove_edge(self, x, y):
        if y not in self.adjlist[x].edges:
            return False
        self.adjlist[x].edges.remove(y)
        return True

    def get_vertex_value(self, name):
        if name in self.adjlist:
            return self.adjlist[name].value
        return None

    def set_vertex_value(self, name, value):
        if name in self.adjlist:
            self.adjlist[name].value = value
            return True
        return False

    def get_vertex_name(self, name):
        if name in self.adjlist:
            return self.adjlist[name].name
        return None


if __name__ == "__main__":
    adjlist = {
        "A": ["B", "C"],
        "B": ["A", "D"],
        "C": ["A"],
        "D": ["B"]
    }

    graph = Graph(adjlist)

    graph.set_vertex_value("A", "Value A")
    graph.set_vertex_value("B", "Value B")
    graph.set_vertex_value("C", "Value C")
    graph.set_vertex_value("D", "Value D")

    print(graph.vertexset)

    print(graph.neighbors("A"))

    print(graph.adjacent("A", "D"))
    print(graph.adjacent("A", "B"))

    print(graph.add_vertex("E", "value E"))
    print(graph.add_vertex("A", "new value A"))

    print(graph.remove_vertex("C"))
    print(graph.remove_vertex("C"))

    print(graph.add_edge("A", "D"))
    print(graph.add_edge("A", "B"))

    print(graph.remove_edge("A", "B"))
    print(graph.remove_edge("A", "B"))

    print(graph.get_vertex_value("A"))
    graph.set_vertex_value("A", "new value A")
    print(graph.get_vertex_value("A"))

    for vertex, vertex_obj in graph.adjlist.items():
        print(f"Vértice {vertex}: valor = {vertex_obj.value}, arestas = {vertex_obj.edges}")
